#!/bin/bash -eu
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".


function exit_print_error(){
    if [[ -z $clang_format ]];then
        echo "Please install 'clang-format' and put it in system PATH," > /dev/stderr
        echo "or specify it in 'git config hooks.indent'" > /dev/stderr
        exit 1
    fi
}

trap exit_print_error EXIT
clang_format="$(git config hooks.indent)" || clang_format=$(command -v clang-format 2>/dev/null)

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    Against=HEAD
else
    # Initial commit: diff against an empty tree object
    Against=$(git hash-object -t tree /dev/null)
fi

## Loop on modified files
while read File; do
    if [[ ! -r $File ]];then
        continue
    fi
    if [[ ! -f $File ]];then
        continue
    fi

    ## Assume we do not have files named "c" or "h"
    Ext=${File##*.}
    case $Ext in
        c|h)
            echo "clang-format " $File > /dev/stderr
            $clang_format -i $File
            ;;
    esac
    git add "$File"
done < <(git diff --cached --name-only $Against)

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $Against -- > /dev/stderr
